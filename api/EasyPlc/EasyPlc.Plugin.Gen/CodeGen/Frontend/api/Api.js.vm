@{ 
var isTreeList = @Model.ModuleType=="treeList";//是否是树表-列表
var isTreeTree = @Model.ModuleType=="treeTree"; //是否是树-树
var isMasterChild = @Model.ModuleType=="masterChild";//是否是主子表
var busName= @Model.BusName;//业务名称
var tableFieIds=@Model.TableFields;//获取字段
}
import { baseRequest } from '@@/utils/request'

const request = (url, ...arg) => baseRequest(`/@(@Model.RouteName)/@(@Model.BusName)/` + url, ...arg)

/**
 * @(@Model.FunctionName)Api接口管理器
 *
 * @@author @Model.AuthorName
 * @@date @Model.GenTime
 **/

 export default {
    // 获取@(@Model.FunctionName)分页
    @(busName)Page(data) {
       return request('page', data, 'get')
    },
    // 获取@(@Model.FunctionName)列表
    @(busName)List(data) {
       return request('list', data, 'get')
    },
    // 提交@(@Model.FunctionName)表单 edit为true时为编辑，默认为新增
    submitForm(data, edit = false) {
       return request(edit ? 'add' : 'edit', data)
    },
    // 获取@(@Model.FunctionName)详情
    @(busName)Detail(data) {
       return request('detail', data, 'get')
    },
    // 删除@(@Model.FunctionName)
    @(busName)Delete(data) {
       return request('delete', data)
    },
    @if(isTreeList||isTreeTree){
    @:// 获取@(@Model.FunctionName)树
    @:@(busName)Tree(data) {
       @:return request('tree', data, 'get')
    @:},
    }
    @{Func();}
    @{LeftTree();}
    @{Fk();}
}

@{
void Func(){
var funcList=@Model.FuncList;//获取功能列表
foreach(var func in funcList){
switch (func)//根据类型生成不同请求
{
//导入
case "import":
    @:// @(@Model.FunctionName)导入模板下载
    @:template(data={}) {
    @:   return request('template', data, 'get', {
    @:       responseType: 'blob'
    @:   })
    @:},
    @:// @(@Model.FunctionName)导入预览
    @:preview(data={}) {
    @:   return request('preview', data)
    @:},
    @:// @(@Model.FunctionName)导入数据
    @:import(data={}) {
    @:   return request('preview', data, 'post', {
    @:       ignoreError: true
    @:   })
    @:},
break;
//导出
case "export":
    @:// 导出@(@Model.FunctionName)数据
    @:@(busName)Export(data) {
    @:   return request('export', data, 'post', {
    @:       responseType: 'blob'
    @:   })
    @:},
break;
//批量编辑
case "batchEdit":
    @:// @(@Model.FunctionName)批量编辑
    @:edits(data) {
    @:   return request('edits', data)
    @:},
break;
}}    
}
//左侧树
void LeftTree(){
var leftTree=@Model.LeftTree;//获取左侧树
switch (leftTree)//根据类型生成不同控件
{
//获取组织选择器
case "org":
    @:// 获取组织选择器
    @:@(leftTree)Tree(data) {
    @:   return request('@(leftTree)TreeSelector', data, 'get')
    @:},
break;
}
}

void Fk(){
foreach (var column in tableFieIds){//遍历字段
if(column.EffectType=="fk"){//如果是外键
    @:// @(@Model.FunctionName)@(column.FieldRemark)选择器
    @:@(busName)Fk@(column.FkEntityName)Selector(data) {
    @:   return request('fk@(column.FkEntityName)Selector', data,'get')
    @:},

}
}
}

}
