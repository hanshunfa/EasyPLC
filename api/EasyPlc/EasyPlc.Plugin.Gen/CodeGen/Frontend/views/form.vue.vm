@{
var tableFieIds=@Model.TableFields;//获取字段
var isTreeList = @Model.ModuleType=="treeList";//是否是树表-列表
var isTreeTree = @Model.ModuleType=="treeTree"; //是否是树-树
var treeId=@SimpleTool.StringHelper.FirstCharToLower(@Model.TreeId);//获取树的id
var treeName=@SimpleTool.StringHelper.FirstCharToLower(@Model.TreeName);//获取树的名称
var treePid=@SimpleTool.StringHelper.FirstCharToLower(@Model.TreePid);//获取树的父级id
var funcName=@Model.FunctionName;
}
<template>
  @{Main();}
</template>
@
@{Script();}

@{
//主体
void Main()
{
<form-container
    @foreach (var column in tableFieIds){//遍历字段
	@if(column.IsPrimarykey=="Y"){//如果是主键
@::title="formData.@column.FieldNameFirstLower ? '编辑@(@Model.FunctionName)' : '增加@(@Model.FunctionName)'"
    }}
    :width="600"
    :visible="visible"
    :destroy-on-close="true"
    @@close="onClose"
>
    <a-form ref="formRef" :model="formData" :rules="formRules" layout="@Model.FormLayout">
	@if(@Model.GridWhether=="Y"){//使用栅格
      @:<a-row :gutter="16">
      @if(isTreeList||isTreeTree){
      @{parent();}
	  }
	  @foreach (var column in tableFieIds){//遍历字段
	  @if(column.WhetherAddUpdate=="Y"){//如果增改
        @:<a-col :span="12">
          @:<a-form-item label="@column.FieldRemark" name="@column.FieldNameFirstLower">
          @:@{FormItem(@column);}          </a-form-item>
        @:</a-col>
		}
	  }
      @:</a-row>	  
	}
	else{
    @if(isTreeList||isTreeTree){
    @{parent();}
    }
	@foreach (var column in tableFieIds){//遍历字段
	@if(column.WhetherAddUpdate=="Y"){//如果增改
        @:<a-form-item label="@column.FieldRemark" name="@column.FieldNameFirstLower">
        @:@{FormItem(@column);}        </a-form-item>
		}
	  }
	}
    </a-form>
    <template #footer>
        <a-button style="margin-right: 8px" @@click="onClose">关闭</a-button>
        <a-button type="primary" @@click="onSubmit" :loading="submitLoading">保存</a-button>
    </template>
</form-container>
}
//父节点选择
void parent(){
    <a-form-item label="上级@(funcName)：" name="@(treePid)">
      <a-tree-select v-model:value="formData.@(treePid)" style="width: 100%" :dropdown-style="{ maxHeight: '400px', overflow: 'auto' }" placeholder="请选择上级@(funcName)"
        allow-clear tree-default-expand-all :tree-data="treeData" :field-names="{ children: 'children',label: '@(treeName)', value: '@(treeId)'}"
        selectable="false" tree-line></a-tree-select>
    </a-form-item>
}
//表单控件
void FormItem(dynamic column){
switch (@column.EffectType)//根据类型生成不同控件
{
//输入框
case "input":
  <a-input v-model:value="formData.@column.FieldNameFirstLower" placeholder="请输入@(@column.FieldRemark)" allow-clear />
break;
case "textarea":
  <a-textarea v-model:value="formData.@column.FieldNameFirstLower" placeholder="请输入@(@column.FieldRemark)" :auto-size="{ minRows: 3, maxRows: 5 }" />
break;
//选择
case "select":
  <a-select v-model:value="formData.@column.FieldNameFirstLower" show-search placeholder="请选择@(@column.FieldRemark)" :options="@(@column.FieldNameFirstLower)Options" />
break;
case "radio":
  <a-radio-group v-model:value="formData.@column.FieldNameFirstLower" placeholder="请选择@(@column.FieldRemark)" :options="@(@column.FieldNameFirstLower)Options" />
break;
case "checkbox":
  <a-checkbox-group v-model:value="formData.@column.FieldNameFirstLower" placeholder="请选择@(@column.FieldRemark)" :options="@(@column.FieldNameFirstLower)Options" />
break;
//数字
case "inputNumber":
  <a-input-number v-model:value="formData.@column.FieldNameFirstLower" :min="1" :max="100" style="width: 100%" />
break;
case "slider":
  <a-slider v-model:value="formData.@column.FieldNameFirstLower" :max="100" :min="1" style="width: 100%" />
break;
//时间
case "datepicker":
@if(@column.FieldNetType=="Date")
{
  @:<a-date-picker v-model:value="formData.@column.FieldNameFirstLower" value-format="YYYY-MM-DD" placeholder="请选择@(@column.FieldRemark)" style="width: 100%" />
}else{
  <a-date-picker v-model:value="formData.@column.FieldNameFirstLower" value-format="YYYY-MM-DD HH:mm:ss" show-time placeholder="请选择@(@column.FieldRemark)" style="width: 100%" />
}
break;
case "timepicker":
  <a-time-picker v-model:value="formData.@column.FieldNameFirstLower" placeholder="请选择@(@column.FieldRemark)" style="width: 100%" />
break;
case "fk":
  <a-select v-model:value="formData.@column.FieldNameFirstLower" show-search placeholder="请选择@(@column.FieldRemark)" :options="fk@(@column.FkEntityName)Options" />
break;
default:
break;}}

void Script(){

var primaryKey=tableFieIds.Where(it => it.IsPrimarykey=="Y").First();//主键字段
var selectColumns=tableFieIds.Where(it => it.EffectType=="select"||it.EffectType=="radio"||it.EffectType=="checkbox").ToList();//选择框字段列表
var addOrUpdateColumns=tableFieIds.Where(it => it.WhetherAddUpdate=="Y").ToList();//增改字段列表
var selectCount=selectColumns.Count;//选择框数量
<script setup name="@(@Model.ClassNameFirstLower)Form">
  @if(selectCount>0){
  @:import tool from '@@/utils/tool'
  }
  import { cloneDeep } from 'lodash-es'
  import { required } from '@@/utils/formRules'
  import @(@Model.ClassNameFirstLower)Api from '@@/api/@Model.RouteName/@(@Model.ClassNameFirstLower)Api'

  // 抽屉状态
  const visible = ref(false)  
  // 定义emit事件
  const emit = defineEmits({ successful: null }) 
  //表单
  const formRef = ref()  
  // 表单数据，也就是默认给一些数据
  const formData = ref({})
  //提交等待
  const submitLoading = ref(false)
  
  @{TreeListConst();}
  
  @foreach (var column in selectColumns){//遍历选择框
  @://@(column.FieldRemark)选项
  @:const @(column.FieldNameFirstLower)Options = ref([])
  }
  
  @{FkOptions();}
   
  // 打开抽屉 
  const onOpen = (record) => {
      visible.value = true //显示抽屉
      @{FkGet();}
	  //表单数据
      formData.value = {
	    @foreach (var column in addOrUpdateColumns){//遍历增改字段
        @if(column.FieldName=="SortCode"){//如果是SortCode
        @:sortCode: 99
        }
	    }
      }
      if (record) {
        let recordData = cloneDeep(record)
		@foreach (var column in addOrUpdateColumns){//遍历增改字段
		@if(column.EffectType=="checkbox"){//如果是checkbox
        @:if (recordData.@column.FieldNameFirstLower) recordData.@column.FieldNameFirstLower= JSON.parse(recordData.@column.FieldNameFirstLower)
		}
		}
        formData.value = Object.assign({}, recordData)
        //const param = {
        @foreach (var column in tableFieIds){//遍历字段
        @if(column.IsPrimarykey=="Y"){//如果是主键
        @://  @column.FieldNameFirstLower: record.@column.FieldNameFirstLower
		}}
        //}
        //@(@Model.ClassNameFirstLower)Api.@(@Model.ClassNameFirstLower)Detail(param).then((data) => {
        //  formData.value = Object.assign({}, data)
        @foreach (var column in addOrUpdateColumns){//遍历增改字段
		@if(column.EffectType=="checkbox"){//如果是checkbox
        @://  recordData.@column.FieldNameFirstLower= JSON.parse(recordData.@column.FieldNameFirstLower)
		}
		}
        //  })
      }  
      @{TreeListMethod();}
	  @foreach (var column in selectColumns){//遍历选择框
      @:@(column.FieldNameFirstLower)Options.value = tool.dictList('@column.DictTypeCode')
	  }
  }
  
  // 关闭抽屉
  const onClose = () => {
      formRef.value.resetFields()
      formData.value = {}
      visible.value = false
  }
  
  // 默认要校验的
  const formRules = {
      @foreach (var column in addOrUpdateColumns){//遍历增改字段
      @if(column.WhetherRequired=="Y"){//如果是必填
      @:@column.FieldNameFirstLower: [required('请输入@(@column.FieldRemark)')],
      }
      }
  }

  // 验证并提交数据
  const onSubmit = () => {
      formRef.value.validate().then(() => {
          submitLoading.value = true
          const formDataParam = cloneDeep(formData.value)
		  @foreach (var column in addOrUpdateColumns){//遍历增改字段
          @if(column.EffectType=="checkbox"){//如果是checkbox、
          @:formDataParam.@column.FieldNameFirstLower = JSON.stringify(formDataParam.@column.FieldNameFirstLower)
		  }
		  }
          @(@Model.ClassNameFirstLower)Api
              .submitForm(formDataParam, !formDataParam.@primaryKey.FieldNameFirstLower)
              .then(() => {
                  onClose()
                  emit('successful')
              })
              .finally(() => {
                  submitLoading.value = false
              })
      })
  }
  // 抛出函数
  defineExpose({
  onOpen
  })
</script>
}

//外键选项
void FkOptions(){
foreach (var column in tableFieIds){//遍历字段
if(column.EffectType=="fk"){//如果是外键
  @:const fk@(column.FkEntityName)Options = ref() //@(column.FieldRemark)数据
  @:const getFk@(column.FkEntityName)Options= () => {
  @:@(@Model.ClassNameFirstLower)Api.@(@Model.BusName)Fk@(column.FkEntityName)Selector().then((data) => {
  @:  fk@(column.FkEntityName)Options.value = data
  @:})
  @:}
  @:
}
}
}

//获取外键
void FkGet(){
foreach (var column in tableFieIds){//遍历字段
if(column.EffectType=="fk"){//如果是外键
      @:getFk@(column.FkEntityName)Options()
      @:
}
}
}

//定义树列表常量
void TreeListConst(){
if(isTreeList||isTreeTree){
  @:// 定义机构元素 
@:const treeData = ref([])
}
}

//定义树列表方法
void TreeListMethod()
{
if(isTreeList||isTreeTree){
	@:// 获取@(funcName)树并加入顶级
	@:@(@Model.ClassNameFirstLower)Api.@(@Model.BusName)Tree().then((res) => {
		@:treeData.value = [
			@:{
				@:id: 0,
				@:parentId: '-1',
				@:name: '顶级',
				@:children: res
			@:}
		@:]
	@:})
}
}

}