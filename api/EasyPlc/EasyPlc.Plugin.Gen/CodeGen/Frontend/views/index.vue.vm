@{
var dataPermission=@Model.DataPermission=="Y";//是否需要数据权限
var isLeftTree=@Model.LeftTree!="null";//是否有左侧树
var tableFieIds=@Model.TableFields;//获取字段
var funcList=@Model.FuncList;//获取功能列表
var isTreeList = @Model.ModuleType=="treeList";//是否是树表-列表
var isTreeTree = @Model.ModuleType=="treeTree"; //是否是树-树
var isMasterChild = @Model.ModuleType=="masterChild";//是否是主子表
var treeId=@SimpleTool.StringHelper.FirstCharToLower(@Model.TreeId);//获取树的id
var treeName=@SimpleTool.StringHelper.FirstCharToLower(@Model.TreeName);//获取树的名称
var treePid=@SimpleTool.StringHelper.FirstCharToLower(@Model.TreePid);//获取树的父级id
var busName= @Model.BusName;//获取业务名称
var funcName= @Model.FunctionName;//获取功能名称
}
<template>
@{Template();}
</template>
@
@{Script();}
@
@{Style();}

@{
void Template()
{
//如果左侧树不为空则生成左侧树
if(isLeftTree||isTreeList){
LeftTree();
}
else{
Main();//否则直接生成主体
}
}


//左侧树
void LeftTree(){
<a-row>
<a-col :span="5">
<a-card class="cardImp" :bordered="false" :loading="cardLoading">
    <a-tree
        v-if="treeData.length > 0"
        v-model:expandedKeys="defaultExpandedKeys"
        :tree-data="treeData"
        :field-names="treeFieldNames"
        @@select="treeSelect"
    />
    <a-empty v-else :image="Empty.PRESENTED_IMAGE_SIMPLE" />
</a-card>
</a-col>
<a-col :span="19">
@{Main();}
</a-col>
</a-row>
}


//主体
void Main()
{
var columnCount = 0;//字段数量
var searchColumns= tableFieIds.Where(it => it.QueryWhether == "Y").ToList();//获取需要查询的字段
<a-card :bordered="false" style="margin-bottom: 10px">
  <a-form ref="searchFormRef" name="advanced_search" class="ant-advanced-search-form" :model="searchFormState">
    <a-row :gutter="24">
	@foreach (var column in searchColumns)//遍历字段
	{
    <a-col :span="6">
      <a-form-item name="@column.FieldNameFirstLower" label="@column.FieldRemark">
	    @switch (@column.EffectType)//根据类型生成不同控件
        {
		//输入框
		case "input":
		case "textarea":
        <a-input v-model:value="searchFormState.@column.FieldNameFirstLower" placeholder="请输入@(@column.FieldRemark)"></a-input>
		break;
		//选择
		case "select":
		case "radio":
		case "checkbox":
        <a-select v-model:value="searchFormState.@column.FieldNameFirstLower" placeholder="请选择@(@column.FieldRemark)" :options="@(@column.FieldNameFirstLower)Options" />
		break;
		//数字
		case "inputNumber":
		case "slider":
        <a-input-number v-model:value="searchFormState.@column.FieldNameFirstLower" placeholder="请输入@(@column.FieldRemark)" style="width: 100%" />
		break;
		//时间
		case "datepicker":
		case "timepicker":
		@if(@column.FieldNetType.ToLower()=="date")
		{
        @:<a-range-picker v-model:value="searchFormState.@column.FieldNameFirstLower" value-format="YYYY-MM-DD" />
		}else{
		@:<a-range-picker v-model:value="searchFormState.@column.FieldNameFirstLower" value-format="YYYY-MM-DD HH:mm:ss" show-time />
		}
		break;
		default:
		<a-input v-model:value="searchFormState.@column.FieldNameFirstLower" placeholder="请输入@(@column.FieldRemark)"></a-input>
        break;
		}
      </a-form-item>
    </a-col>
	columnCount++;
	if(columnCount==3) break;//默认只显示3个字段，其他的折叠
	}
	@if(searchColumns.Count>3)//如果字段大于3个则生成折叠面板
	{
    <template v-if="advanced">
	  @for (int i = 3; i < searchColumns.Count; i++)//遍历字段,从第四个开始
	  {
      <a-col :span="6">
        <a-form-item name="@searchColumns[i].FieldNameFirstLower" label="@searchColumns[i].FieldRemark">
		@switch (@searchColumns[i].EffectType)
        {
		//输入框
		case "input":
		case "textarea":
        <a-input v-model:value="searchFormState.@searchColumns[i].FieldNameFirstLower" placeholder="请输入@(@searchColumns[i].FieldRemark)"></a-input>
		break;
		//选择
		case "select":
		case "radio":
		case "checkbox":
        <a-select v-model:value="searchFormState.@searchColumns[i].FieldNameFirstLower" placeholder="请选择@(@searchColumns[i].FieldRemark)" :options="@(@searchColumns[i].FieldNameFirstLower)Options" />
		break;
		//数字
		case "inputNumber":
		case "slider":
        <a-input-number v-model:value="searchFormState.@searchColumns[i].FieldNameFirstLower" placeholder="请输入@(@searchColumns[i].FieldRemark)" style="width: 100%" />
		break;
		//时间
		case "datepicker":
		case "timepicker":
		@if(@searchColumns[i].FieldNetType.ToLower()=="date")
		{
        @:<a-range-picker v-model:value="searchFormState.@searchColumns[i].FieldNameFirstLower" value-format="YYYY-MM-DD" />
		}else{
		@:<a-range-picker v-model:value="searchFormState.@searchColumns[i].FieldNameFirstLower" value-format="YYYY-MM-DD HH:mm:ss" show-time />
		}
		break;
		default:
		<a-input v-model:value="searchFormState.@searchColumns[i].FieldNameFirstLower" placeholder="请输入@(@searchColumns[i].FieldRemark)"></a-input>
        break;
		}
        </a-form-item>
      </a-col>
	}
    </template>
	}
    <a-col :span="6">
      <a-button type="primary" @@click="table.refresh(true)">
        <template #icon><SearchOutlined /></template>查询</a-button>
      <a-button class="buttom-left" @@click="() => searchFormRef.resetFields()">
        <template #icon><redo-outlined /></template>重置</a-button>
	  @if(searchColumns.Count>3){//折叠
      <a @@click="toggleAdvanced" style="margin-left: 8px">
        {{ advanced ? '收起' : '展开' }}
        <component :is="advanced ? 'up-outlined' : 'down-outlined'"/>
      </a>
	  }
    </a-col>
    </a-row>
  </a-form>
</a-card>
@{Table();}
}

//表格部分
void Table()
{
var showColumns= tableFieIds.Where(it => it.WhetherTable == "Y").ToList();//获取需要显示的字段
<a-card :bordered="false">
  <s-table
    ref="table"
    :columns="columns"
    :data="loadData"
    :alert="options.alert.show"
    :scroll="{ x: '1000px' | true }"
    bordered
    @if(isTreeTree){
@::show-pagination="false"
    }
    @foreach (var column in tableFieIds){//遍历字段
    @if(column.IsPrimarykey=="Y"){//如果是主键
    @::row-key="(record) => record.@column.FieldNameFirstLower"
    }
    @if(column.WhetherResizable=="Y"){//如果是可伸缩列
@:@@resizeColumn="handleResizeColumn"
    }
    }
    :row-selection="options.rowSelection"
    :tool-config="toolConfig"
  >
    <template #operator>
      <a-space>
        <a-button type="primary" @@click="formRef.onOpen()"  v-if="hasPerm('@(@Model.ClassNameFirstLower)Add')">
        <template #icon><plus-outlined /></template>新增@(funcName)</a-button>
        @if(funcList.Contains("batchEdit")){//如果有批量删除
        @:<a-button @@click="batchEditRef.onOpen(selectedRowKeys)" :disabled="selectedRowKeys.length === 0" v-if="hasPerm('@(@Model.ClassNameFirstLower)BatchEdit')">
        @:<template #icon><edit-outlined /></template>编辑@(funcName)</a-button>
        }
        @if(funcList.Contains("batchDelete")){//如果有批量删除
        @:<batch-delete  v-if="hasPerm('@(@Model.ClassNameFirstLower)BatchDelete')"
        @:    title="确定要删除选中@(funcName)吗?" buttonName="删除@(funcName)" :selectedRowKeys="selectedRowKeys" @@batchDelete="batchDelete@(@Model.ClassName)"/>
        }
        @if(funcList.Contains("import")){//如果有导入
        @:<a-button @@click="openImport" v-if="hasPerm('@(@Model.ClassNameFirstLower)Import')">
        @:<template #icon><download-outlined /></template>导入@(funcName)</a-button>
        }
        @if(funcList.Contains("export")){//如果有导出
        @:<data-export  buttonName="导出@(funcName)" @@dataExport="dataExport@(@Model.ClassNameFirstLower)" v-if="hasPerm('@(@Model.ClassNameFirstLower)Export')" />
        }
      </a-space>
    </template>
    <template #bodyCell="{ column, record }">
	@foreach (var column in showColumns){//遍历显示字段
	@switch (@column.EffectType)
    {
      //选择
      case "select":
      case "radio":
      <template v-if="column.dataIndex === '@column.FieldNameFirstLower'">
          {{ $TOOL.dictTypeData('@column.DictTypeCode', record.@column.FieldNameFirstLower) }}
      </template>
      break;
	  //checkbox
      case "checkbox":
      <template v-if="column.dataIndex === '@column.FieldNameFirstLower'">
      <a-tag v-for="textValue in JSON.parse(record.@column.FieldNameFirstLower)" :key="textValue" color="green">{{ $TOOL.dictTypeData('@column.DictTypeCode', textValue) }}</a-tag>
      </template>
      break;
	  //日期
	  case "datepicker":
	  @if(@column.FieldNetType.ToLower()=="date")
	  {
      @:<template v-if="column.dataIndex === '@column.FieldNameFirstLower'">
      @:    {{ record.@(@column.FieldNameFirstLower) && record.@(@column.FieldNameFirstLower) .substr(0, 10) }}
      @:</template>
      }
	  break;
      //图片
	  case "image":
      <template v-if="column.dataIndex === '@column.FieldNameFirstLower'">
         <a-image :src="record.@(@column.FieldNameFirstLower)" />
      </template>
	  break;
      //外键
	  case "fk":
      <template v-if="column.dataIndex === '@column.FieldNameFirstLower'">
         {{ fk@(@column.FkEntityName)Options.find((item) => item.value === record.@column.FieldNameFirstLower)?.label }}
      </template>
	  break;
	}
	}
      <template v-if="column.dataIndex === 'action'">
        <a-space>
          <a @@click="formRef.onOpen(record)" v-if="hasPerm('@(@Model.ClassNameFirstLower)Edit')" >编辑</a>
          <a-divider type="vertical"  v-if="hasPerm(['@(@Model.ClassNameFirstLower)Edit', '@(@Model.ClassNameFirstLower)Delete'], 'and')" />
          <a-popconfirm title="确定要删除吗？" @@confirm="delete@(@Model.ClassName)(record)">
            <a-button type="link" danger size="small"  v-if="hasPerm('@(@Model.ClassNameFirstLower)Delete')">删除</a-button>
          </a-popconfirm>
      </a-space>
      </template>
    </template>
  </s-table>
</a-card>
<Form ref="formRef" @@successful="table.refresh(true)" />
@if(funcList.Contains("import")){//如果有导入
<data-import ref="importRef" title="导入@(funcName)" :api="@(@Model.ClassNameFirstLower)Api" :max-upload-count="2000" @@successful="table.refresh(true)"/>
}
@if(funcList.Contains("batchEdit")){//如果有批量编辑
<batch-edit ref="batchEditRef" title="编辑@(funcName)" :api="@(@Model.ClassNameFirstLower)Api" code="@(@Model.ClassNameFirstLower)" @@successful="table.refresh(true)" />
}
}

//Js部分
void Script()
{
var searchColumns= tableFieIds.Where(it => it.QueryWhether == "Y").ToList();//获取需要查询的字段
var searchCount=searchColumns.Count;//查询字段数量
var isSelect=searchColumns.Any(it => it.EffectType=="select"||it.EffectType=="radio"||it.EffectType=="checkbox");//是否有选择框
<script setup name="@(busName)">
  import { message, Empty } from 'ant-design-vue'
  @if(isSelect){
  @:import tool from '@@/utils/tool'
  }
  import Form from './form.vue'
  import @(@Model.ClassNameFirstLower)Api from '@@/api/@(@Model.RouteName)/@(@Model.ClassNameFirstLower)Api'
  
  @{FormConst(searchCount);}
  
  @if(isLeftTree||isTreeList){ //如果左侧树不为空则生成左侧树const
  @{LeftTreeConst();}
  }

  @{OtherConst();}

  @{TableConst();}
  
  @{FkOptions();}
  
  // 表格查询 返回 Promise 对象
  const loadData = (parameter) => {
      @if(searchCount>0){
      @:const searchFormParam = JSON.parse(JSON.stringify(searchFormState))
	  @foreach (var column in searchColumns){//遍历字段
	  @if(column.EffectType=="datepicker")//如果是时间类型,范围查询条件重载
	  {
      @://@(@column.FieldNameFirstLower)范围查询条件重载
      @:if (searchFormParam.@column.FieldNameFirstLower) {
          @:searchFormParam.start@(@column.FieldNameFirstUpper) = searchFormParam.@(@column.FieldNameFirstLower)[0]
          @:searchFormParam.end@(@column.FieldNameFirstUpper) = searchFormParam.@(@column.FieldNameFirstLower)[1]
          @:delete searchFormParam.@column.FieldNameFirstLower
      @:}
	  }
	  }
      @if(isTreeTree){//如果是树形结构
      @:return @(@Model.ClassNameFirstLower)Api.@(busName)Tree(Object.assign(parameter, searchFormParam)).then((data) => {
      @:  if (data) { return data } else { return [] }
      @:})
      }
      else{
      @:return @(@Model.ClassNameFirstLower)Api.@(busName)Page(Object.assign(parameter, searchFormParam)).then((data) => {
      @:   return data })
      }
	  }
	  else{
      @if(isTreeTree){//如果是树形结构
      @:return @(@Model.ClassNameFirstLower)Api.@(busName)Page(Object.assign(parameter)).then((data) => {
         @:  if (data) { return data } else { return [] }
      @: })
      }
      else{
      @:return @(@Model.ClassNameFirstLower)Api.@(busName)Page(Object.assign(parameter)).then((data) => {
      @:   return data })
      }
      
	  }
    }
    
  @{DeleteScript();}
  
  @if(searchCount>0){
  @foreach (var column in searchColumns){//遍历字段
  @if(column.EffectType=="select"||column.EffectType=="radio"||column.EffectType=="checkbox"){//如果有选择，加载字典
  @:
  @://@(@column.FieldRemark)字典
  @:const @(@column.FieldNameFirstLower)Options = tool.dictList('@column.DictTypeCode')
  }}}
  
  
  @if(isLeftTree){ //如果左侧树不为空则生成左侧树方法
  @{LeftTreeMethod(@Model.LeftTree);}
  }
  else if(isTreeList){ //如果是树列表
   @{LeftTreeMethod(busName);}
  }

  @{OtherMethod();}

</script>
}

void FkOptions(){
foreach (var column in tableFieIds){//遍历字段
if(column.EffectType=="fk"){//如果是外键
  @:const fk@(column.FkEntityName)Options = ref([]) //@(column.FieldRemark)数据
  @:@(@Model.ClassNameFirstLower)Api.@(busName)Fk@(column.FkEntityName)Selector().then((data) => {
  @:  fk@(column.FkEntityName)Options.value = data
  @:})
  @:
}
}
}

//表格属性配置
void TableConst()
{
  @://表格配置
  @:const table = ref() //表格
  @:let selectedRowKeys = ref([]) //选中项
  @:const toolConfig = { refresh: true, height: true, columnSetting: true, striped: false } //表格工具配置
  @:const columns = [
  @foreach (var column in tableFieIds){//遍历字段
  @if(column.WhetherTable=="Y"){//如果列表显示
      @:{
        @:title: '@column.FieldRemark',
        @if(@column.Width!=0){
        @:width: @column.Width,
        }
        @if(@column.WhetherResizable=="Y"){//如果列可伸缩
        @:resizable: true,
        }
	    @if(column.WhetherRetract=="Y")//如果列省略
		{
        @:dataIndex: '@column.FieldNameFirstLower',
        @:ellipsis: true
	    }
		else{
        @:dataIndex: '@column.FieldNameFirstLower'
		}
      @:},
  }
  }
  @:]

  @:if (hasPerm(['@(@Model.ClassNameFirstLower)Edit', '@(@Model.ClassNameFirstLower)Delete'])) {
	  @:columns.push({
		  @:title: '操作',
	  	  @:dataIndex: 'action',
	      @:align: 'center',
          @:fixed: 'right',
		  @:width: '130px'
	  @:})
  @:}
  @:
  @:// 列表选择配置
  @:const options = reactive({
		@:alert: {
			@:show: true, //显示选择多少个
			@:clear: () => {
				@:selectedRowKeys = ref([])
			@:}
		@:},
		@:rowSelection: {
			@:onChange: (selectedRowKey, selectedRows) => {
				@:selectedRowKeys.value = selectedRowKey
			@:}
		@:}
	@:}) 
  @:
  @foreach (var column in tableFieIds){//遍历字段
  @if(column.WhetherResizable=="Y"){//如果可伸缩列
  @:const handleResizeColumn = (w, col) => {
        @:col.width = w
  @:}
  }
  } 
 
}

//表单属性配置
void FormConst(int searchCount){
  if(searchCount>0){
  @:let searchFormState = reactive({}) //查询表单状态
  @:const searchFormRef = ref() //查询表单
  @:// 查询区域显示更多控制
  @:const advanced = ref(false)
  @:const toggleAdvanced = () => {
  @:    advanced.value = !advanced.value
  @:}
  }
  @:const formRef = ref()//新增/编辑表单页
}

//删除方法
void DeleteScript(){
  @:// 删除
  @:const delete@(@Model.ClassName) = (record) => {
      @:let params = [
          @:{
		    @foreach (var column in tableFieIds){//遍历字段
            @if(column.IsPrimarykey=="Y"){//如果是主键
            @:@column.FieldNameFirstLower: record.@column.FieldNameFirstLower ,
			}}
          @:}
      @:]
      @:@(@Model.ClassNameFirstLower)Api.@(busName)Delete(params).then(() => {
        @:table.value.refresh(true)
      @:})
  @:}
  @: 
  @if(funcList.Contains("batchDelete")){//如果有批量删除功能
  @:// 批量删除
  @:const batchDelete@(@Model.ClassName) = (params,callback) => {
      @:@(@Model.ClassNameFirstLower)Api.@(busName)Delete(params).then(() => {})
          @:.finally(() => {
		  @:table.value.clearRefreshSelected()
		      @:callback() //调用组件中的回调方法
		  @:})
      @:}
  }
}

//其他常定义
void OtherConst(){
  @if(funcList.Contains("import")) @:  const importRef = ref() //导入组件
  @if(funcList.Contains("batchEdit")) @:  const batchEditRef = ref() //批量更新组件
}

//其他方法
void OtherMethod()
{
@if(funcList.Contains("import")) {
  @:// 打开导入界面
  @:const openImport = (record) => {
	@:nextTick(() => {
		@:importRef.value.importSteps(record)
	@:})
  @:}
}

@if(funcList.Contains("export")) {
  @:// 导出数据
  @:const dataExport@(@Model.ClassNameFirstLower) = (callback) => {
	@:@(@Model.ClassNameFirstLower)Api.@(busName)Export(searchFormState)
		@:.then((data) => {
			@:callback(data)
		@:})
		@:.catch(() => {
			@:callback(null)
		@:})
	@:}
}

}

//左侧树属性配置
void LeftTreeConst()
{
  @://左侧树配置
  @:let defaultExpandedKeys = ref([]) // 默认展开的节点
  @:const treeData = ref([]) // 左侧树数据
  @:// 替换treeNode 中 title,key,children
  @if(isTreeList){//如果是树列表就用配置的字段
  @:const treeFieldNames = { children: 'children', title: '@(treeName)', key: '@(@SimpleTool.StringHelper.FirstCharToLower(treeId))' }
  }
  else{ //如果不是树列表就用默认的字段
  @:const treeFieldNames = { children: 'children', title: 'name', key: 'id' }
  }
  @:const cardLoading = ref(true) // 左侧树加载状态
}

//左侧树方法定义
void LeftTreeMethod(string leftTree)
{
  @:// 点击树查询
  @:const treeSelect = (selectedKeys) => {
  @:	if (selectedKeys.length > 0) {
  @if(isTreeList){
  @:		searchFormState.@(treePid) = selectedKeys.toString()
  }
  else{
  @:		searchFormState.@(leftTree)Id = selectedKeys.toString()
  }
  @:	} else {
  @if(isTreeList){
  @:		delete searchFormState.@(treePid)
  }
  else{
  @:		delete searchFormState.@(leftTree)Id
  }
  @:		}
  @:		table.value.refresh(true)
  @:	}

  @:// 左侧树查询
  @:@(@Model.ClassNameFirstLower)Api.@(leftTree)Tree()
	@:.then((res) => {
		@:cardLoading.value = false
		@:if (res !== null) {
			@:treeData.value = res
			@:// 默认展开2级
			@:treeData.value.forEach((item) => {
				@:// 因为0的顶级
				@:if (item.parentId === 0) {
					@:defaultExpandedKeys.value.push(item.id)
					@:// 取到下级ID
					@:if (item.children) {
						@:item.children.forEach((items) => {
							@:defaultExpandedKeys.value.push(items.id)
						@:})
					@:}
				@:}
			@:})
		@:}
	@:})
	@:.finally(() => {
		@:cardLoading.value = false
	@:})
}


//Css部分
void Style()
{
@:
<style scoped>
@if(isLeftTree||isTreeList){
    @:.cardImp {
    @:	margin-right: 10px;
    @:}
}
    .buttom-left {
      margin-left: 8px;
    }
</style>
}
}